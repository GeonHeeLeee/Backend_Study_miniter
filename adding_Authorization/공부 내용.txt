Hashing, bcrypt

사용자가 미니 트위터에 가입하면, DB에 개인정보를 암호화해서 저장해야 된다. 그리고 사용자가 로그인 하려고 할 때마다, 입력한 정보를 다시 암호화해 DB에 저장된 암호화된 정보와 비교해서
일치하면 로그인에 성공한다. 

보통 암호화는 단방향 hash함수를 이용한다. 단방향 hash 함수란, 어떠한 문자열을 암호화 했을때 암호화된 정보를 이용해 암호화 전 정보를 알 수 없는 것을 뜻한다. (복호화)
어떤 코드를 암호화 했을 때, 매우 복잡하고 긴 문자열로 해싱되므로 이를 역추적은 불가능하지만, rainbow table을 이용해 이전 정보를 알아낼 수 있다.
rainbow table은, 가능한 모든 숫자 + 문자 조합을 미리 해싱하여 table로 만들어 놓은 것이다. 원래의 해싱 함수가 처리속도를 매우 빠르게 만들어 놓았기 때문에 미리 만들어 놓는 것이
불가능하지 않다.

rainbow attack을 방어하기 위해 두가지 방법이 주로 쓰인다.
1. salting
2. key strectching

salting은 해싱 전 데이터에 랜덤 데이터를 붙여 해싱하는 것을 말한다. 해싱된 데이터의 원본 데이터를 알 수 있지만 어디서 어디까지가 진짜 데이터이고 salting 된 데이터인지 알아내기 힘들다.
key strectching은 해싱 된 데이터를 또 해싱하고 이를 다시 해싱하는 방법이다.

그래서 보통 이 두가지를 모두 지원하는 bcrypt를 많이 사용한다.




JWT

HTTP 통신은 Stateless(각각의 HTTP 통신들이 독립적)이기 때문에 로그인에 성공하여도 새로운 HTTP연결에서는 로그인을 했는지 안했는지 알수가 없다. 따라서 이를 해결하기 위해 Access Token
을 사용한다. Access Token을 HTTP 연결에 첨부해서 보냄으로써 사용자가 로그인을 했다는 것을 다른 HTTP연결에서도 알 수 있게 한다.

JWT(Json Web Token)은 Access Token을 생성한다. JWT도 해킹의 위험성이 있으므로 암호화한다.
JWT는 3가지의 구조로 나뉘어져 있다.

1.header - token type, 해시 알고리즘 (암호화하지 않음)
2.payload - 보내고자하는 데이터 (암호화하지 않음)
3.signature - 서버에서 생성한 데이터가 맞는지 (암호화)

JWT에 중요한 정보등은 넣지 않는것이 좋다. 왜냐하면 header와 payload는 암호화 되지 않기 때문이다. 그리고 누구나 JWT를 만들수 있기 때문에 signature부분을 암호화하여
서버에서 생성한 JWT가 맞는지 확인한다.
